// backend/routes/auth.js
const express = require("express");
const jwt = require("jsonwebtoken");
const knex = require("../db/knex");
const bcrypt = require("bcryptjs");

const router = express.Router();

// Gera token JWT
function generateToken(user) {
if (!process.env.JWT_SECRET) throw new Error("JWT_SECRET n√£o definido");
return jwt.sign(user, process.env.JWT_SECRET, { expiresIn: "60d" });
}

// Middleware para autentica√ß√£o (busca o token no cabe√ßalho Authorization)
async function authenticateToken(req, res, next) {
// Padr√£o JWT: Extrai o token de 'Authorization: Bearer <token>'
const authHeader = req.headers['authorization'];
const token = authHeader && authHeader.split(' ')[1]; 

if (!token) {
 return res.status(401).json({ error: "N√£o autenticado: Token 'Bearer' ausente" });
}

try {
 const user = jwt.verify(token, process.env.JWT_SECRET);
 req.user = user;
 next();
} catch (err) {
 console.error("Token inv√°lido:", err);
 res.status(403).json({ error: "Token inv√°lido ou expirado" });
}
}

// ===================================
// üöÄ ROTA: CADASTRO (REGISTER)
// ===================================
router.post("/register", async (req, res) => {
  try {
    const { nome, email, senha, user_type } = req.body;
    if (!nome || !email || !senha) {
      return res.status(400).json({ error: "Nome, email e senha s√£o obrigat√≥rios" });
    }

    const existingUser = await knex("user_profiles").where({ user_id: email }).first();
    if (existingUser) {
      return res.status(409).json({ error: "Email j√° cadastrado." });
    }

    const salt = await bcrypt.genSalt(10);
    const passwordHash = await bcrypt.hash(senha, salt);

    // Usa o tipo vindo do front, se v√°lido, sen√£o 'user'
    const tipo = user_type === 'owner' ? 'owner' : 'user';

    const [newUser] = await knex("user_profiles")
      .insert({
        user_id: email,
        nome,
        password_hash: passwordHash,
        user_type: tipo
      })
      .returning('*');

    const token = generateToken({ user_id: newUser.user_id, user_type: newUser.user_type });

    delete newUser.password_hash;
    res.status(201).json({ success: true, user: newUser, token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Erro interno no cadastro" });
  }
});


// Login
router.post("/login", async (req, res) => {
try {
 const { email, senha } = req.body;
 if (!email || !senha) return res.status(400).json({ error: "Email e senha s√£o obrigat√≥rios" });

 const user = await knex("user_profiles").where({ user_id: email }).first();
 if (!user) return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });

 const validPassword = await bcrypt.compare(senha, user.password_hash);
 if (!validPassword) return res.status(401).json({ error: "Senha incorreta" });

 // Gera o token
 const token = generateToken({ user_id: user.user_id, user_type: user.user_type });

 delete user.password_hash; // Remove o hash
 
 // RETORNA O TOKEN NO JSON DA RESPOSTA
 res.json({ success: true, user, token });
} catch (err) {
 console.error(err);
 res.status(500).json({ error: "Erro interno no login" });
}
});

// Recupera√ß√£o de senha (simula√ß√£o)
router.post("/recover", async (req, res) => {
try {
 const { email } = req.body;
 if (!email) return res.status(400).json({ error: "Email √© obrigat√≥rio" });

 const user = await knex("user_profiles").where({ user_id: email }).first();
 if (!user) {
  // Por seguran√ßa, n√£o revelamos se o email existe ou n√£o
  return res.json({ message: "Se o email estiver cadastrado, voc√™ receber√° instru√ß√µes de recupera√ß√£o" });
 }

 // Simula√ß√£o: apenas retorna mensagem de sucesso
 res.json({ message: "Email de recupera√ß√£o enviado com sucesso" });
} catch (err) {
 console.error(err);
 res.status(500).json({ error: "Erro interno na recupera√ß√£o" });
}
});

// Rota /me
router.get("/me", authenticateToken, async (req, res) => {
try {
 const user = await knex("user_profiles").where({ user_id: req.user.user_id }).first();
 if (!user) return res.status(404).json({ error: "Usu√°rio n√£o encontrado" });
 delete user.password_hash; // Remove o hash
 res.json({ user });
} catch (err) {
 console.error(err);
 res.status(500).json({ error: "Erro ao buscar usu√°rio" });
}
});

// Logout (Apenas retorna sucesso, o frontend deve descartar o token localmente)
router.post("/logout", (req, res) => {
// N√£o h√° cookie para limpar.
res.json({ success: true, message: "Sess√£o encerrada (Frontend deve descartar o token)" });
});

module.exports = router;